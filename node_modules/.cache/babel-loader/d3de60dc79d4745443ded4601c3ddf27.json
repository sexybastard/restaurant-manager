{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar TimeInput = function (_Component) {\n  _inherits(TimeInput, _Component);\n\n  function TimeInput(props) {\n    _classCallCheck(this, TimeInput);\n\n    var _this = _possibleConstructorReturn(this, (TimeInput.__proto__ || Object.getPrototypeOf(TimeInput)).call(this, props));\n\n    _this.state = {\n      time: _this.props.initTime || ''\n    };\n    _this.lastVal = '';\n    return _this;\n  }\n\n  _createClass(TimeInput, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      if (!this.props.disabled && this.props.mountFocus) {\n        setTimeout(function () {\n          _this2._input.focus();\n        }, 0);\n      }\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate() {\n      var _this3 = this;\n\n      if (this.props.mountFocus) {\n        setTimeout(function () {\n          _this3._input.focus();\n        }, 0);\n      }\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      if (nextProps.initTime) {\n        this.onChangeHandler(nextProps.initTime);\n      }\n    }\n  }, {\n    key: 'isValid',\n    value: function isValid(val) {\n      var letterArr = val.split(':').join('').split(''),\n          regexp = /^\\d{0,2}?\\:?\\d{0,2}$/,\n          valArr = [];\n\n      var _val$split = val.split(':'),\n          _val$split2 = _slicedToArray(_val$split, 2),\n          hoursStr = _val$split2[0],\n          minutesStr = _val$split2[1];\n\n      if (!regexp.test(val)) {\n        return false;\n      }\n\n      var hours = Number(hoursStr);\n      var minutes = Number(minutesStr);\n\n      var isValidHour = function isValidHour(hour) {\n        return Number.isInteger(hours) && hours >= 0 && hours < 24;\n      };\n\n      var isValidMinutes = function isValidMinutes(minutes) {\n        return Number.isInteger(minutes) && hours >= 0 && hours < 24 || Number.isNaN(minutes);\n      };\n\n      if (!isValidHour(hours) || !isValidMinutes(minutes)) {\n        return false;\n      }\n\n      if (minutes < 10 && Number(minutesStr[0]) > 5) {\n        return false;\n      }\n\n      if (valArr.indexOf(':')) {\n        valArr = val.split(':');\n      } else {\n        valArr.push(val);\n      } // check mm and HH\n\n\n      if (valArr[0] && valArr[0].length && (parseInt(valArr[0], 10) < 0 || parseInt(valArr[0], 10) > 23)) {\n        return false;\n      }\n\n      if (valArr[1] && valArr[1].length && (parseInt(valArr[1], 10) < 0 || parseInt(valArr[1], 10) > 59)) {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: 'onChangeHandler',\n    value: function onChangeHandler(val) {\n      if (val == this.state.time) {\n        return;\n      }\n\n      if (this.isValid(val)) {\n        if (val.length === 2 && this.lastVal.length !== 3 && val.indexOf(':') === -1) {\n          val = val + ':';\n        }\n\n        if (val.length === 2 && this.lastVal.length === 3) {\n          val = val.slice(0, 1);\n        }\n\n        if (val.length > 5) {\n          return false;\n        }\n\n        this.lastVal = val;\n        this.setState({\n          time: val\n        });\n\n        if (val.length === 5) {\n          this.props.onTimeChange(val);\n        }\n      }\n    }\n  }, {\n    key: 'getType',\n    value: function getType() {\n      if (this.props.type) {\n        return this.props.type;\n      }\n\n      return 'tel';\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this4 = this;\n\n      return _react2.default.createElement('input', {\n        name: this.props.name ? this.props.name : undefined,\n        className: this.props.className,\n        type: this.getType(),\n        disabled: this.props.disabled,\n        placeholder: this.props.placeholder,\n        value: this.state.time,\n        onChange: function onChange(e) {\n          return _this4.onChangeHandler(e.target.value);\n        },\n        onFocus: this.props.onFocusHandler ? function (e) {\n          return _this4.props.onFocusHandler(e);\n        } : undefined,\n        onBlur: this.props.onBlurHandler ? function (e) {\n          return _this4.props.onBlurHandler(e);\n        } : undefined,\n        ref: function ref(c) {\n          return _this4._input = c;\n        }\n      });\n    }\n  }]);\n\n  return TimeInput;\n}(_react.Component);\n\nTimeInput.defaultProps = {\n  placeholder: ' '\n};\nexports.default = TimeInput;","map":null,"metadata":{},"sourceType":"script"}